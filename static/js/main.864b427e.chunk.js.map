{"version":3,"sources":["imports.ts","app.tsx","serviceWorker.ts","index.tsx"],"names":["imports","_imports","apply","this","arguments","_callee","rustyboy","Emulator","regenerator_default","a","wrap","_context","prev","next","Promise","all","__webpack_require__","e","then","bind","sent","abrupt","stop","App","_useState","useState","_useState2","Object","slicedToArray","wasm","setWasm","useEffect","_loadWasm","asyncToGenerator","mark","t0","t1","t2","alert","loadWasm","useWasm","default","_useState3","_useState4","game","setGame","_useState5","_useState6","gameboy","setGameboy","_useState7","_useState8","hasDebugger","setHasDebugger","loading","_load","_callee2","arrayBuffer","uint8View","_context2","Response","Uint8Array","setup","load","react_default","createElement","className","htmlFor","hidden","id","name","type","accept","onChange","value","target","files","checked","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.864b427e.chunk.js","sourcesContent":["export async function imports() {\n  const rustyboy = await import('rustyboy-web');\n  const Emulator = await import('./emulator');\n  return {rustyboy, Emulator};\n}","import React, {FunctionComponent, useState, useEffect} from 'react';\nimport {Gameboy as GameboyType} from 'rustyboy-web';\nimport {imports} from './imports';\n\nfunction useWasm() {\n  const [wasm, setWasm] = useState();\n\n  useEffect(() => {\n    async function loadWasm() {\n      try {\n        setWasm(await imports());\n      } catch (err) {\n        alert('Error loading WebAssembly module: ' + err);\n      }\n    }\n\n    loadWasm();\n  }, [setWasm]);\n\n  return wasm;\n}\n\nconst App: FunctionComponent = () => {\n  const imports = useWasm();\n  const rustyboy = imports && imports.rustyboy;\n  const Emulator = imports && imports.Emulator && imports.Emulator.default;\n  const [game, setGame] = useState<Blob>();\n  const [gameboy, setGameboy] = useState<GameboyType>();\n  const [hasDebugger, setHasDebugger] = useState(false);\n  const loading = !imports;\n\n  useEffect(() => {\n    async function load() {\n      if (game && !loading) {\n        try {\n          const arrayBuffer = await new Response(game).arrayBuffer();\n          const uint8View = new Uint8Array(arrayBuffer);\n          setGameboy(rustyboy.setup(uint8View));\n        } catch (err) {\n          alert('Error loading Rustyboy: ' + err);\n        }\n      }\n    }\n\n    load();\n  }, [game, loading, rustyboy]);\n\n  if (loading) return <p>Loading...</p>;\n\n  return (\n    <div className=\"container\">\n      {!gameboy && (\n        <div className=\"fileSelectionContainer\">\n          <h1>Rustyboy</h1>\n          <div className=\"cartridgeInput\">\n            <label htmlFor=\"cartridge\">Load game</label>\n            <input hidden id=\"cartridge\" name=\"cartridge\" type=\"file\" accept=\".gb\" onChange={value => {\n              if (value.target.files && value.target.files[0]) {\n                setGame(value.target.files[0]);\n              }\n            }} />\n          </div>\n          <label htmlFor=\"hasDebugger\" className=\"hasDebugger\">\n            <input\n              id=\"hasDebugger\"\n              name=\"hasDebugger\"\n              type=\"checkbox\"\n              onChange={(e) => setHasDebugger(e.target.checked)}\n            />\n            <span>Debug mode</span>\n          </label>\n        </div>\n      )}\n      {gameboy && Emulator && (\n        <Emulator hasDebugger={hasDebugger} gameboy={gameboy} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}